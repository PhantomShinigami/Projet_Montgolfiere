#include <RunningMedian.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
int sound_digital = D8;
int sound_analog = A0;
define seconds() (millis()/1000)
const char* ssid = "CCF_Montgolfiere";
const char* password = "";
const char* mqtt_server = "192.168.107.136";
WiFiClient espClient;
PubSubClient client(espClient);


RunningMedian samples = RunningMedian(5);


long now = millis();
long lastMeasure = 0;

// Don't change the function below. This functions connects your ESP8266 to your router
void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("WiFi connected - ESP IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(String topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  String messageTemp;

  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();
}

// This functions reconnects your ESP8266 to your MQTT broker
// Change the function below if you want to subscribe to more topics with your ESP8266
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP8266Client", "usersnir2", "projetmontgolfiere")) {
      Serial.println("connected");
      // Subscribe or resubscribe to a topic
      // You can subscribe to more topics (to control more LEDs in this example)

    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}



void setup(){

  
  Serial.begin(115200);
  pinMode(sound_digital, INPUT); 
  Serial.print("Running Median Version: ");  
  Serial.println(RUNNING_MEDIAN_VERSION);
  pinMode(sound_digital, INPUT);
   setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  
  delay(1000); 
}

void loop(){
  if (!client.connected()) {
    reconnect();
  }
  if (!client.loop())
    client.connect("ESP8266Client");
 now = millis();
  // Publishes new temperature and humidity every 30 seconds
  if (now - lastMeasure > 30000) {
    lastMeasure = now;
    float s;
    s = analogRead(D8);
    if (isnan(s)){
       Serial.println("Failed to read from DHT sensor!");
      return;
    }
  int val_digital = digitalRead(sound_digital);
  int val_analog = analogRead(sound_analog);
  Serial.print(val_analog);
  Serial.print("\t");
  Serial.println(val_digital);
  Serial.println(); 
  Serial.print(digitalRead(sound_digital));
  Serial.print(analogRead(sound_analog));  
  delay(30000); // interval 
  static char sonson[7];
  dtostrf(s, 6, 2, sonson);
  client.publish("room/son", sonson);
  Serial.print("%\t Son: ");
  Serial.print(s);
//  test1();
}
}
void test1()
{
  int x = analogRead(A0);
  samples.add(x);
  long m = samples.getMedian();
  Serial.print(millis());
  Serial.print("\t");
  Serial.println(m);
  delay(1000);
} 
